Цель проекта:  поиск по базе афиши, макисмально похожей на поступившее изображение, в частности поиск афиши по фотографии.

Методы:
1) Детектор/дескриптор SURF.  Детекторы находят точки интереса (точки изображения, обладающие высокой локальной информативностью). В частности SURF ищет эти точки  на основании двумерной функции Гаусса и матрице Гессе. Затем SURF строит описание, инвариантное к изменению масштаба и вращения. Далее для каждой найденной особой точки вычисляется ориентация – преобладающее направление перепада яркости. По полученным данным получаем дескриптор точки.

2) Кластеризация k_means. Этот алгоритм разбивает базу особых точек на k кластеров, минимизируя суммарное расстояние от точек до центров кластеров этих точек. (минимизируется скалярное произведение разности векторов). Происходит несколько итераций алгоритма, в котором центры кластеров выбираются неким способом (случайным), и выбирается минимальное значение суммы из всех итераций.

4) Tf-idf метрика. Считаем, что слово - это кластер, а документ - изображение. Тогда tf-idf метрика позволяет оценить важность данного кластера для этой картинки, избавляясь от кластеров, которые встречаются почти во всех документах (часто встречаемые объекты, которые не столь важны, например, трава на изображении) с помощью idf и рассчитывая относительную ценность данного кластера для этого изображения (чем больше точек изображения лежит в этом класетере, тем важнее).
TF_i =  n_i / N, где  n_i - кол-во слов в документе, принадлежащих i-ому кластеру, N - кол-во слов всего. 
IDF_i = log( D / d_i). Где D - кол-во изображений, а d_i - кол-во изображений, где есть данный кластер.

3) Инвертированный индекс. Для каждого кластера заводим вектор всех изображений, в которых есть точки этого кластера.

4) Метод RANSAC. Позволяет подобрать функцию, такую что кол-во выбросов значений будет минимальным. Т.е. по набору точек (x, y) данный метод позволяет узнать кол-во выбросов(случайных точек) в данном множестве точек. Первый этап метода: по случайно выбранным точкам строится функция-гипотеза, вычисляется суммарное расстояние от точек до нее. Производится несколько итераций данного шага, выбирается гипотеза с минимальным отклонением.
Второй этап: производится проверка гипотезы, подсчитывается кол-во инлайнеров.

Этапы:
1) Сначала считаем дескрипторы всех изображений базы. Чтобы избавиться от лишних особых точек перед подсчетом уменьшаем каждое изображение до размера 480x640 пикселей и размываем используя GaussianBlur. По каждому изображению в среднем имеем 100 особых точек.
2) Кластеризуем, чтобы дескрипторы, описывающие одит и тот же объект, принадлежали одному кластеру. Было выбрано 1000 кластеров на 700000 особых точек.
3) Имея кластеризацию, заводим аналог мешка слов для изображений. То есть для каждого изображения будем хранить вектор кластеров и степень их важности для этого изображения.
4) Инвертируя индекс, мы сужаем область поиска по базе.
5)Предподсчет закончен. Теперь получаем на вход изображение, находим его дескрипторы, и самостоятельно кластеризуем его, выбирая для каждой точки ближайший центр кластера. Используем тф-идф метрику, чтобы отсеять неважные кластеры. Теперь с помощью инвертированного индекса выбираем объединение всех изображений, в которых есть хотя бы один кластер из кластеров поданного на вход изображения. Теперь же среди полученный выборки, ищем изображение, у которого  tf-idf метрика наиболее приближена к tf-idf метрике поступившего изображения.
6) Выбираем топ-100 изображений наиболее подходящих под поданное на поиска с помощью предыдущих шагов. Теперь попарно сравниваем их с помощью RANSAC(строим матрицу преобразования, выбираем то изображение, на котором кол-во инлайнеров(не выбросов) наибольшее). Как правило на подходящее изображение получаем ~50 инлайеров, в то время как на неподходящие изображения получаем <10.

Результаты: 1. Алгоритм поиска устойчив к умеренной зашумленности изображения, некоторым геометрическим преобразованиям(аффинным, некоторвым проективным).
2. Время работы ~15-18 секунд
3. Занимаемая память 900Мб